---
import Layout from '../../../layouts/Layout.astro';
import { hobbies } from '../../../data/hobbies.json';
import currencyData from '../../../data/currencies.json';

// --- Page Generation Logic ---
export function getStaticPaths() {
  const languages = ['en', 'es', 'de', 'fr', 'pt', 'ja', 'ar', 'hi'];
  const paths = [];
  hobbies.forEach(hobby => {
    if (hobby?.id && hobby.name?.['en']) {
      languages.forEach(lang => {
        paths.push({ params: { lang, hobby: hobby.id } });
      });
    }
  });
  return paths;
}

// --- Data Preparation ---
const { lang, hobby: hobbyId } = Astro.params;
const hobby = hobbies.find(h => h.id === hobbyId);

// Default level
const level = 'beginner';

// Helpers
const getText = (field, fallback = '') => {
  if (!field) return fallback;
  if (typeof field === 'string') return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return fallback;
};
const getArray = (field) => {
  if (!field) return [];
  if (Array.isArray(field)) return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return [];
};
---
<Layout title={`Cost of ${getText(hobby.name)}`} lang={lang}>
  <div class="bg-white py-8">
    <div class="max-w-7xl mx-auto px-4">
      <!-- Breadcrumb -->
      <div class="text-sm breadcrumbs mb-4">
        <ul>
          <li><a href={`/${lang}/`}>Home</a></li>
          <li><a href={`/${lang}/hobbies`}>Hobbies</a></li>
          <li>{getText(hobby.name)}</li>
        </ul>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-4">
        <!-- Main Content -->
        <div class="lg:col-span-2 space-y-8">
          <!-- Tabs + Currency -->
          <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
            <div class="flex gap-2 bg-gray-100 rounded-lg p-1">
              <button class="tab-btn active px-4 py-2 rounded-md font-medium" data-level="beginner">Beginner</button>
              <button class="tab-btn px-4 py-2 rounded-md font-medium" data-level="intermediate">Intermediate</button>
              <button class="tab-btn px-4 py-2 rounded-md font-medium" data-level="advanced">Advanced</button>
            </div>
            <div>
              <label class="block text-sm font-semibold text-gray-600 mb-1">Convert Currency</label>
              <select id="currency-select" class="select select-bordered w-32">
                {Object.keys(currencyData.rates).map(c => (
                  <option value={c}>{c}</option>
                ))}
              </select>
            </div>
          </div>

          <!-- Items & Total -->
          <div id="items-container" class="space-y-6"></div>
          <div class="bg-indigo-700 text-white rounded-lg p-6 mt-8 text-center">
            <h2 id="total-display" class="text-4xl font-bold">$0 - $0</h2>
          </div>

          <!-- FAQ -->
          {getArray(hobby.faq).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg p-4 sm:p-8 rounded-2xl">
              <h2 class="text-2xl font-bold mb-4">Frequently Asked Questions</h2>
              <div class="space-y-2">
                {getArray(hobby.faq).map((item, idx) => (
                  <div class="border rounded-lg">
                    <button class="w-full text-left px-4 py-2 font-medium bg-gray-100 hover:bg-gray-200 faq-toggle">
                      {getText(item.q)}
                    </button>
                    <div class="hidden px-4 py-3 text-sm text-gray-700">{getText(item.a)}</div>
                  </div>
                ))}
              </div>
            </div>
          }

          <!-- Footer Links -->
          <footer class="mt-10 text-sm text-gray-500 flex flex-wrap gap-4">
            <a href={`/${lang}/about`}>About</a>
            <a href={`/${lang}/privacy`}>Privacy Policy</a>
            <a href={`/${lang}/terms`}>Terms of Service</a>
            <a href={`/${lang}/disclaimer`}>Disclaimer</a>
            <a href={`/${lang}/contact`}>Contact</a>
          </footer>
        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-8">
          {getArray(hobby.recommendedGear).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg">
              <div class="card-body">
                <h3 class="card-title">Recommended Gear</h3>
                {getArray(hobby.recommendedGear).map(gear => (
                  <a href={gear.link} target="_blank" class="block p-2 rounded-lg hover:bg-gray-100">
                    <div class="flex gap-4 items-center">
                      <div class="flex-shrink-0 w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                      </div>
                      <div>
                        <p class="font-bold leading-tight">{getText(gear.name)}</p>
                        <p class="text-xs text-indigo-600 font-semibold mt-1">View on Amazon â†’</p>
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          }

          {getArray(hobby.stats).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg">
              <div class="card-body">
                <h3 class="card-title">{getText(hobby.name)} Stats</h3>
                <ul class="space-y-2 mt-2">
                  {getArray(hobby.stats).map(stat => (
                    <li class="flex justify-between text-sm py-1 border-b border-gray-200/80">
                      <span class="text-gray-500">{getText(stat.label)}</span>
                      <span class="font-semibold">{getText(stat.value)}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Scripts -->
  <script define:vars={{ hobby, currencyData }}>
    const rates = currencyData.rates;
    let currentLevel = 'beginner';
    let currentCurrency = 'USD';

    const itemsContainer = document.getElementById('items-container');
    const totalDisplay = document.getElementById('total-display');
    const currencySelect = document.getElementById('currency-select');

    function renderItems(level) {
      itemsContainer.innerHTML = '';
      const data = hobby.breakdown?.[level]?.keyItems || [];
      data.forEach(item => {
        const div = document.createElement('div');
        div.className = "flex items-center justify-between bg-white rounded-lg shadow p-3";
        div.innerHTML = `
          <label class="flex items-center gap-3 w-full">
            <input type="checkbox" class="item-check" data-min="${item.cost[0]}" data-max="${item.cost[1] || item.cost[0]}" checked />
            <div class="flex-1">
              <p class="font-medium">${item.name.en}</p>
              <p class="text-xs text-gray-500">${item.desc?.en || ''}</p>
            </div>
            <span class="item-price text-sm font-semibold text-gray-700">${formatPrice(item.cost[0], item.cost[1])}</span>
          </label>
        `;
        itemsContainer.appendChild(div);
      });
      updateTotal();
    }

    function formatPrice(min, max) {
      const rate = rates[currentCurrency] || 1;
      const formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currentCurrency,
        maximumFractionDigits: 0
      });
      const minVal = formatter.format(min * rate);
      const maxVal = formatter.format(max * rate);
      return min === max ? minVal : `${minVal} - ${maxVal}`;
    }

    function updateTotal() {
      let min = 0, max = 0;
      document.querySelectorAll('.item-check:checked').forEach(chk => {
        min += parseFloat(chk.dataset.min);
        max += parseFloat(chk.dataset.max);
      });
      totalDisplay.textContent = formatPrice(min, max);
    }

    // Events
    document.addEventListener('change', e => {
      if (e.target.classList.contains('item-check')) updateTotal();
      if (e.target === currencySelect) {
        currentCurrency = currencySelect.value;
        renderItems(currentLevel);
      }
    });
    document.querySelectorAll('.tab-btn').forEach(btn => {
      btn.addEventListener('click', () => {
        document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active', 'bg-indigo-600','text-white'));
        btn.classList.add('active','bg-indigo-600','text-white');
        currentLevel = btn.dataset.level;
        renderItems(currentLevel);
      });
    });
    document.querySelectorAll('.faq-toggle').forEach(btn => {
      btn.addEventListener('click', () => {
        const content = btn.nextElementSibling;
        content.classList.toggle('hidden');
      });
    });

    // Init
    renderItems(currentLevel);
  </script>
</Layout>
