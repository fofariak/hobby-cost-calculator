---
import Layout from '../../../layouts/Layout.astro';
import { hobbies } from '../../../data/hobbies.json';
import currencyData from '../../../data/currencies.json';

export function getStaticPaths() {
  const languages = ['en', 'es', 'de', 'fr', 'pt', 'ja', 'ar', 'hi'];
  const paths = [];
  if (hobbies && Array.isArray(hobbies)) {
    hobbies.forEach(hobby => {
      if (hobby?.id && hobby?.name && hobby.name['en']) { // We only need English to exist to build all pages
        languages.forEach(lang => {
          paths.push({ params: { lang, hobby: hobby.id } });
        });
      }
    });
  }
  return paths;
}

const { lang, hobby: hobbyId } = Astro.params;
const hobby = hobbies.find(h => h.id === hobbyId);

// **FIX:** Bulletproof helper functions that NEVER fail
const getText = (field, fallback = '') => field?.[lang] || field?.['en'] || fallback;
const getArray = (field) => field?.[lang] || field?.['en'] || [];

const allItems = {
    beginner: hobby.breakdown?.beginner?.keyItems || [],
    intermediate: hobby.breakdown?.intermediate?.keyItems || [],
    advanced: hobby.breakdown?.advanced?.keyItems || []
};
---
<Layout title={`Cost of ${getText(hobby.name)}`} lang={lang}>
  <div class="bg-gray-50/50 py-8">
    <div class="max-w-7xl mx-auto px-4">
      <div class="text-sm breadcrumbs">
        <ul><li><a href={`/${lang}/`}>Home</a></li> <li><a>Hobbies</a></li> <li>{getText(hobby.name)}</li></ul>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-4" x-data="calculatorData()">
        <div class="lg:col-span-2 space-y-8">
          <div class="card bg-white shadow-xl p-4 sm:p-8">
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <div class="tabs tabs-boxed">
                <a class="tab sm:tab-lg" :class="{ 'tab-active': level === 'beginner' }" @click="setLevel('beginner')">Beginner</a>
                <a class="tab sm:tab-lg" :class="{ 'tab-active': level === 'intermediate' }" @click="setLevel('intermediate')">Intermediate</a>
                <a class="tab sm:tab-lg" :class="{ 'tab-active': level === 'advanced' }" @click="setLevel('advanced')">Advanced</a>
              </div>
              <div class="form-control w-full sm:w-auto">
                <select class="select select-bordered" x-model="currency" @change="updateTotals()">
                  <template x-for="curr in Object.keys(rates)"><option :value="curr" x-text="curr"></option></template>
                </select>
              </div>
            </div>
            <div class="divider"></div>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-8 gap-y-2">
              <div>
                <h3 class="text-lg font-bold mb-2">Essential Equipment</h3>
                <template x-for="(item, index) in currentItems.filter(i => i.category === 'essential')">
                  <div class="form-control my-1"><label class="label cursor-pointer justify-start gap-4 p-2 hover:bg-gray-50 rounded-lg">
                    <input type="checkbox" class="checkbox checkbox-primary" :value="index" x-model="selectedItems" @change="updateTotals()"/>
                    <div><span class="label-text font-medium" x-text="getText(item.name)"></span><div class="text-xs text-gray-500" x-text="getText(item.desc)"></div></div>
                    <span class="label-text ml-auto font-semibold text-gray-600" x-text="formatCost(item.cost)"></span>
                  </label></div>
                </template>
              </div>
              <div>
                <h3 class="text-lg font-bold mb-2">Software & Ongoing</h3>
                <template x-for="(item, index) in currentItems.filter(i => i.category === 'software')">
                   <div class="form-control my-1"><label class="label cursor-pointer justify-start gap-4 p-2 hover:bg-gray-50 rounded-lg">
                    <input type="checkbox" class="checkbox checkbox-primary" :value="index" x-model="selectedItems" @change="updateTotals()"/>
                    <div><span class="label-text font-medium" x-text="getText(item.name)"></span><div class="text-xs text-gray-500" x-text="getText(item.desc)"></div></div>
                    <span class="label-text ml-auto font-semibold text-gray-600" x-text="formatCost(item.cost)"></span>
                  </label></div>
                </template>
              </div>
            </div>
            <div class="bg-indigo-700 text-white rounded-lg p-6 mt-8 text-center">
              <h2 class="text-4xl font-bold" x-text="formatTotal(totalMin, totalMax)"></h2>
            </div>
          </div>
          
          {getArray(hobby.tips).length > 0 &&
            <div class="card bg-white shadow-xl p-4 sm:p-8">
               <h2 class="text-2xl font-bold mb-4">Money-Saving Tips</h2>
               <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                 {getArray(hobby.tips).map(tip => (
                   <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                     <h4 class="font-bold text-green-800">{getText(tip.title)}</h4>
                     <p class="text-sm text-green-700">{getText(tip.desc)}</p>
                   </div>
                 ))}
               </div>
            </div>
          }
          
          {getArray(hobby.faq).length > 0 &&
            <div class="card bg-white shadow-xl p-4 sm:p-8">
              <h2 class="text-2xl font-bold mb-4">Frequently Asked Questions</h2>
              <div class="space-y-2">
                {getArray(hobby.faq).map((item, index) => (
                  <div class="collapse collapse-plus bg-base-200">
                    <input type="radio" name={`hobby-accordion-${index}`} /> 
                    <div class="collapse-title text-xl font-medium">{getText(item.q)}</div>
                    <div class="collapse-content"><p>{getText(item.a)}</p></div>
                  </div>
                ))}
              </div>
            </div>
          }
        </div>

        <div class="lg:col-span-1 space-y-8">
          {hobby.recommendedGear && hobby.recommendedGear.length > 0 &&
            <div class="card bg-white shadow-xl">
              <div class="card-body">
                <h3 class="card-title">Recommended Gear</h3>
                {hobby.recommendedGear.map(gear => (
                  <a href={gear.link} target="_blank" class="block p-2 rounded-lg hover:bg-gray-50">
                    <div class="flex gap-4 items-center">
                      <img src={gear.image} alt={getText(gear.name)} class="w-16 h-16 object-cover rounded-lg bg-gray-200" />
                      <div><p class="font-bold leading-tight">{getText(gear.name)}</p><p class="text-sm text-gray-600">${gear.price}</p><p class="text-xs text-indigo-600 font-semibold mt-1">View on Amazon &rarr;</p></div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <script is:inline src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
  <script define:vars={{ allItems, rates: currencyData.rates, lang }}>
    document.addEventListener('alpine:init', () => {
      Alpine.data('calculatorData', () => ({
        level: 'beginner', currency: 'USD', selectedItems: [], totalMin: 0, totalMax: 0,
        allItems: allItems, rates: rates,
        getText(field) { return field?.[lang] || field?.['en'] || ''; },
        get currentItems() { return this.allItems[this.level] || []; },
        setLevel(newLevel) {
          this.level = newLevel;
          const essentialIndices = this.currentItems.map((item, index) => ({ item, index }))
            .filter(p => p.item.category === 'essential').map(p => p.index.toString());
          this.selectedItems = essentialIndices;
          this.updateTotals();
        },
        updateTotals() { /* ... same as before ... */ },
        formatCost(cost) { /* ... same as before ... */ },
        formatTotal(min, max) { /* ... same as before ... */ },
        init() { this.setLevel('beginner'); }
      }));
    });
  </script>
</Layout>
