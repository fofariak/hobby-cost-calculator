---
import Layout from '../../../layouts/Layout.astro';
import { hobbies } from '../../../data/hobbies.json';
import currencyData from '../../../data/currencies.json';

// --- Page Generation Logic ---
export function getStaticPaths() {
  const languages = ['en', 'es', 'de', 'fr', 'pt', 'ja', 'ar', 'hi'];
  const paths = [];
  hobbies.forEach(hobby => {
    if (hobby?.id && hobby.name?.['en']) {
      languages.forEach(lang => {
        paths.push({ params: { lang, hobby: hobby.id } });
      });
    }
  });
  return paths;
}

// --- Data Preparation Logic ---
const { lang, hobby: hobbyId } = Astro.params;
const hobby = hobbies.find(h => h.id === hobbyId);

const level = Astro.url.searchParams.get('level') || 'beginner';
const currency = Astro.url.searchParams.get('currency') || 'USD';
const rate = currencyData.rates[currency] || 1;

if (!hobby) {
  return Astro.redirect(`/${lang}/404`);
}

// Helper functions
const getText = (field, fallback = '') => {
  if (!field) return fallback;
  if (typeof field === 'string') return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return fallback;
};

const getArray = (field) => {
  if (!field) return [];
  if (Array.isArray(field)) return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return [];
};

const formatCurrency = (value) => {
  if (typeof value !== 'number') return '?';
  try {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency,
      maximumFractionDigits: 0
    }).format(value * rate);
  } catch {
    return `${(value * rate).toFixed(0)} ${currency}`;
  }
};

const currentItems = hobby.breakdown?.[level]?.keyItems || [];
let totalMin = 0;
let totalMax = 0;
currentItems.forEach(item => {
  if (item.category === 'essential' || item.category === 'software') {
    totalMin += item.cost[0];
    totalMax += item.cost[1] || item.cost[0];
  }
});
---
<Layout title={`Cost of ${getText(hobby.name)}`} lang={lang}>
  <div class="bg-white py-8">
    <div class="max-w-7xl mx-auto px-4">
      <div class="text-sm breadcrumbs">
        <ul><li><a href={`/${lang}/`}>Home</a></li> <li><a>Hobbies</a></li> <li>{getText(hobby.name)}</li></ul>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mt-4">
        <div class="lg:col-span-2 space-y-8">
          <div class="card bg-gray-50/60 shadow-lg p-4 sm:p-8 rounded-2xl">
            <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
              <div role="tablist" class="tabs tabs-boxed bg-gray-200">
                <a role="tab" href={`?level=beginner&currency=${currency}`} class:list={["tab sm:tab-lg", { "tab-active": level === 'beginner' }]}>Beginner</a>
                <a role="tab" href={`?level=intermediate&currency=${currency}`} class:list={["tab sm:tab-lg", { "tab-active": level === 'intermediate' }]}>Intermediate</a>
                <a role="tab" href={`?level=advanced&currency=${currency}`} class:list={["tab sm:tab-lg", { "tab-active": level === 'advanced' }]}>Advanced</a>
              </div>
              
              <div class="w-full sm:w-auto">
                <select
                  id="currency-select"
                  name="currency"
                  class="select select-bordered"
                  onchange="
                    const url = new URL(window.location.href);
                    url.searchParams.set('currency', this.value);
                    window.location.href = url.toString();
                  "
                >
                  {Object.keys(currencyData.rates).map(c => <option value={c} selected={c === currency}>{c}</option>)}
                </select>
              </div>

            </div>
            <div class="divider my-6"></div>

            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-8 gap-y-2">
              <div>
                <h3 class="text-lg font-bold mb-2">Essential Equipment</h3>
                {currentItems.filter(i => i.category === 'essential').map(item => (
                  <div class="form-control my-2">
                    <label class="label justify-start gap-4 p-2 cursor-pointer">
                      <input type="checkbox" class="checkbox checkbox-primary equipment-checkbox" data-min={item.cost[0]} data-max={item.cost[1] || item.cost[0]} checked />
                      <div>
                        <span class="label-text font-medium">{getText(item.name)}</span>
                        <div class="text-xs text-gray-500">{getText(item.desc)}</div>
                      </div>
                      <span class="label-text ml-auto font-semibold text-gray-600 item-price">
                        {formatCurrency(item.cost[0])} - {formatCurrency(item.cost[1] || item.cost[0])}
                      </span>
                    </label>
                  </div>
                ))}
              </div>
              <div>
                <h3 class="text-lg font-bold mb-2">Software & Ongoing</h3>
                {currentItems.filter(i => i.category === 'software').map(item => (
                  <div class="form-control my-2">
                    <label class="label justify-start gap-4 p-2 cursor-pointer">
                      <input type="checkbox" class="checkbox checkbox-primary equipment-checkbox" data-min={item.cost[0]} data-max={item.cost[1] || item.cost[0]} checked />
                      <div>
                        <span class="label-text font-medium">{getText(item.name)}</span>
                        <div class="text-xs text-gray-500">{getText(item.desc)}</div>
                      </div>
                      <span class="label-text ml-auto font-semibold text-gray-600 item-price">
                        {formatCurrency(item.cost[0])}
                      </span>
                    </label>
                  </div>
                ))}
              </div>
            </div>

            <div class="bg-indigo-700 text-white rounded-lg p-6 mt-8 text-center">
              <h2 id="total-cost" class="text-4xl font-bold">
                {formatCurrency(totalMin)} - {formatCurrency(totalMax)}
              </h2>
            </div>
          </div>

          {getArray(hobby.tips).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg p-4 sm:p-8 rounded-2xl">
               <h2 class="text-2xl font-bold mb-4">Money-Saving Tips</h2>
               <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                 {getArray(hobby.tips).map(tip => (
                   <div class="bg-green-100/50 border border-green-200 rounded-lg p-4">
                     <h4 class="font-bold text-green-800">{getText(tip.title)}</h4>
                     <p class="text-sm text-green-700">{getText(tip.desc)}</p>
                   </div>
                 ))}
               </div>
            </div>
          }

          {getArray(hobby.faq).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg p-4 sm:p-8 rounded-2xl">
              <h2 class="text-2xl font-bold mb-4">Frequently Asked Questions</h2>
              <div class="space-y-2">
                {getArray(hobby.faq).map((item) => (
                  <details class="border rounded-lg group">
                    <summary class="list-none flex justify-between items-center w-full p-3 font-medium cursor-pointer">
                      {getText(item.q)}
                      <span class="transition-transform duration-200 group-open:rotate-45 text-xl font-light">+</span>
                    </summary>
                    <div class="p-3 pt-0 text-sm text-gray-700">
                      {getText(item.a)}
                    </div>
                  </details>
                ))}
              </div>
            </div>
          }
        </div>

        <div class="lg:col-span-1 space-y-8">
          {getArray(hobby.recommendedGear).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg">
              <div class="card-body">
                <h3 class="card-title">Recommended Gear</h3>
                {getArray(hobby.recommendedGear).map(gear => (
                  <a href={gear.link} target="_blank" class="block p-2 rounded-lg hover:bg-gray-100">
                    <div class="flex gap-4 items-center">
                      <div class="flex-shrink-0 w-16 h-16 bg-gray-200 rounded-lg flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                      </div>
                      <div>
                        <p class="font-bold leading-tight">{getText(gear.name)}</p>
                        <p class="text-xs text-indigo-600 font-semibold mt-1">View on Amazon &rarr;</p>
                      </div>
                    </div>
                  </a>
                ))}
              </div>
            </div>
          }

          {getArray(hobby.stats).length > 0 &&
            <div class="card bg-gray-50/60 shadow-lg">
              <div class="card-body">
                <h3 class="card-title">{getText(hobby.name)} Stats</h3>
                <ul class="space-y-2 mt-2">
                  {getArray(hobby.stats).map(stat => {
                    const rawVal = getText(stat.value);
                    const numeric = parseFloat(rawVal.replace(/[^0-9.-]+/g, ""));
                    const isMoney = !isNaN(numeric) && rawVal.includes("$");
                    return (
                      <li class="flex justify-between text-sm py-1 border-b border-gray-200/80">
                        <span class="text-gray-500">{getText(stat.label)}</span>
                        {isMoney ? (
                          <span class="font-semibold stat-price" data-value={numeric}>{formatCurrency(numeric)}</span>
                        ) : (
                          <span class="font-semibold">{rawVal}</span>
                        )}
                      </li>
                    );
                  })}
                </ul>
              </div>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ currencyData }}>
    const currencySelect = document.getElementById("currency-select");
    const checkboxes = document.querySelectorAll(".equipment-checkbox");
    const totalBox = document.getElementById("total-cost");

    function format(value, currency) {
      const rate = currencyData.rates[currency] || 1;
      try {
        return new Intl.NumberFormat("en-US", {
          style: "currency",
          currency,
          maximumFractionDigits: 0
        }).format(value * rate);
      } catch {
        return `${(value * rate).toFixed(0)} ${currency}`;
      }
    }

    function recalc() {
      const currency = currencySelect.value;
      let min = 0, max = 0;

      checkboxes.forEach(cb => {
        const minVal = parseFloat(cb.dataset.min) || 0;
        const maxVal = parseFloat(cb.dataset.max) || minVal;
        if (cb.checked) {
          min += minVal;
          max += maxVal;
        }

        const label = cb.closest("label").querySelector(".item-price");
        if (label) {
          label.textContent = maxVal > minVal 
            ? `${format(minVal, currency)} - ${format(maxVal, currency)}`
            : format(minVal, currency);
        }
      });

      totalBox.textContent = `${format(min, currency)} - ${format(max, currency)}`;

      document.querySelectorAll(".stat-price").forEach(el => {
        const base = parseFloat(el.dataset.value);
        if (!isNaN(base)) {
          el.textContent = format(base, currency);
        }
      });
    }

    checkboxes.forEach(cb => cb.addEventListener("change", recalc));
    recalc();
  </script>
</Layout>
