---
import Layout from '../../../layouts/Layout.astro';
import { hobbies } from '../../../data/hobbies.json';
import currencyData from '../../../data/currencies.json';

// --- Page Generation Logic ---
export function getStaticPaths() {
  const languages = ['en', 'es', 'de', 'fr', 'pt', 'ja', 'ar', 'hi'];
  const paths = [];
  hobbies.forEach(hobby => {
    if (hobby?.id && hobby.name?.['en']) {
      languages.forEach(lang => {
        paths.push({ params: { lang, hobby: hobby.id } });
      });
    }
  });
  return paths;
}

// --- Data Preparation Logic ---
const { lang, hobby: hobbyId } = Astro.params;
const hobby = hobbies.find(h => h.id === hobbyId);

const level = 'beginner'; // default view is beginner
const currency = 'USD';

// Helper functions
const getText = (field, fallback = '') => {
  if (!field) return fallback;
  if (typeof field === 'string') return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return fallback;
};

const getArray = (field) => {
  if (!field) return [];
  if (Array.isArray(field)) return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return [];
};
---
<Layout title={`Cost of ${getText(hobby.name)}`} lang={lang}>
  <div class="bg-gray-50 py-10">
    <div class="max-w-7xl mx-auto px-4">
      <!-- Breadcrumb -->
      <div class="text-sm text-gray-500 mb-4">
        <a href={`/${lang}/`} class="hover:underline">Home</a> / 
        <span>Hobbies</span> / 
        <span class="font-medium text-gray-700">{getText(hobby.name)}</span>
      </div>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Left Column -->
        <div class="lg:col-span-2 space-y-8">
          <!-- Tabs + Currency -->
          <div class="flex flex-col sm:flex-row justify-between items-center gap-4">
            <div id="level-tabs" class="tabs tabs-boxed bg-gray-200 rounded-xl shadow-inner">
              <button class="tab sm:tab-lg tab-active" data-level="beginner">Beginner</button>
              <button class="tab sm:tab-lg" data-level="intermediate">Intermediate</button>
              <button class="tab sm:tab-lg" data-level="advanced">Advanced</button>
            </div>
            <div>
              <label class="block text-sm text-gray-600 mb-1">Convert Currency</label>
              <select id="currency-select" name="currency" class="select select-bordered w-40">
                {Object.keys(currencyData.rates).map(c => <option value={c} selected={c === currency}>{c}</option>)}
              </select>
            </div>
          </div>

          <!-- Items Grid -->
          {['beginner','intermediate','advanced'].map(lvl => {
            const items = hobby.breakdown?.[lvl]?.keyItems || [];
            return (
              <div class="level-items" data-level={lvl} class:hidden={lvl !== level}>
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-8 gap-y-6 mt-6">
                  <div>
                    <h3 class="text-lg font-bold mb-2">Essential Equipment</h3>
                    {items.filter(i => i.category === 'essential').map(item => (
                      <div class="bg-white rounded-xl shadow p-3 mb-3 hover:shadow-md transition">
                        <label class="flex items-start gap-3 cursor-pointer">
                          <input 
                            type="checkbox" 
                            class="checkbox checkbox-primary equipment-checkbox mt-1" 
                            data-min={item.cost[0]} 
                            data-max={item.cost[1] || item.cost[0]} 
                            checked 
                          />
                          <div class="flex-1">
                            <p class="font-medium">{getText(item.name)}</p>
                            <p class="text-xs text-gray-500">{getText(item.desc)}</p>
                          </div>
                          <span class="text-sm font-semibold text-gray-700 item-price">
                            ${item.cost[0]} - ${item.cost[1] || item.cost[0]}
                          </span>
                        </label>
                      </div>
                    ))}
                  </div>

                  <div>
                    <h3 class="text-lg font-bold mb-2">Software & Ongoing</h3>
                    {items.filter(i => i.category === 'software').map(item => (
                      <div class="bg-white rounded-xl shadow p-3 mb-3 hover:shadow-md transition">
                        <label class="flex items-start gap-3 cursor-pointer">
                          <input 
                            type="checkbox" 
                            class="checkbox checkbox-primary equipment-checkbox mt-1" 
                            data-min={item.cost[0]} 
                            data-max={item.cost[1] || item.cost[0]} 
                            checked 
                          />
                          <div class="flex-1">
                            <p class="font-medium">{getText(item.name)}</p>
                            <p class="text-xs text-gray-500">{getText(item.desc)}</p>
                          </div>
                          <span class="text-sm font-semibold text-gray-700 item-price">
                            ${item.cost[0]}
                          </span>
                        </label>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            );
          })}

          <!-- Blue Total -->
          <div class="bg-indigo-600 text-white rounded-xl shadow-lg p-6 text-center mt-6">
            <h2 id="total-cost" class="text-4xl font-extrabold tracking-tight">
              $0 - $0
            </h2>
          </div>

          <!-- Tips -->
          {getArray(hobby.tips).length > 0 &&
            <div class="bg-white rounded-xl shadow p-6">
              <h2 class="text-2xl font-bold mb-4">üí° Money-Saving Tips</h2>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                {getArray(hobby.tips).map(tip => (
                  <div class="bg-green-50 border border-green-200 rounded-lg p-4 hover:bg-green-100 transition">
                    <h4 class="font-bold text-green-800">{getText(tip.title)}</h4>
                    <p class="text-sm text-green-700">{getText(tip.desc)}</p>
                  </div>
                ))}
              </div>
            </div>
          }

          <!-- FAQ -->
          {getArray(hobby.faq).length > 0 &&
            <div class="bg-white rounded-xl shadow p-6">
              <h2 class="text-2xl font-bold mb-4">‚ùì Frequently Asked Questions</h2>
              <div class="space-y-2">
                {getArray(hobby.faq).map((item, idx) => (
                  <div class="border rounded-lg overflow-hidden">
                    <button 
                      type="button" 
                      class="w-full text-left p-3 font-medium flex justify-between items-center bg-gray-50 hover:bg-gray-100"
                      onclick={`this.nextElementSibling.classList.toggle('hidden')`}
                    >
                      {getText(item.q)}
                      <span class="text-gray-500">+</span>
                    </button>
                    <div class="hidden p-3 text-sm text-gray-700 bg-white">{getText(item.a)}</div>
                  </div>
                ))}
              </div>
            </div>
          }
        </div>

        <!-- Right Column -->
        <div class="lg:col-span-1 space-y-8">
          {getArray(hobby.recommendedGear).length > 0 &&
            <div class="bg-white rounded-xl shadow p-6">
              <h3 class="text-lg font-bold mb-3">Recommended Gear</h3>
              <div class="space-y-3">
                {getArray(hobby.recommendedGear).map(gear => (
                  <a href={gear.link} target="_blank" class="block rounded-lg p-3 hover:bg-gray-50 transition border">
                    <p class="font-semibold text-gray-800">{getText(gear.name)}</p>
                    <p class="text-xs text-indigo-600 mt-1">View on Amazon ‚Üí</p>
                  </a>
                ))}
              </div>
            </div>
          }

          {getArray(hobby.stats).length > 0 &&
            <div class="bg-white rounded-xl shadow p-6">
              <h3 class="text-lg font-bold mb-3">{getText(hobby.name)} Stats</h3>
              <ul class="space-y-2 mt-2">
                {getArray(hobby.stats).map(stat => {
                  const rawVal = getText(stat.value);
                  const numeric = parseFloat(rawVal.replace(/[^0-9.]/g, ""));
                  const isMoney = !isNaN(numeric) && rawVal.includes("$");
                  return (
                    <li class="flex justify-between text-sm py-1 border-b border-gray-200/80">
                      <span class="text-gray-500">{getText(stat.label)}</span>
                      {isMoney ? (
                        <span class="font-semibold stat-price" data-value={numeric}>{rawVal}</span>
                      ) : (
                        <span class="font-semibold">{rawVal}</span>
                      )}
                    </li>
                  );
                })}
              </ul>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <!-- Script -->
  <script define:vars={{ currencyData }}>
    const currencySelect = document.getElementById("currency-select");
    const tabs = document.querySelectorAll("#level-tabs button");
    const levelContainers = document.querySelectorAll(".level-items");
    const totalBox = document.getElementById("total-cost");
    let activeLevel = "beginner";

    function format(value, currency) {
      try {
        return new Intl.NumberFormat("en-US", {
          style: "currency",
          currency,
          maximumFractionDigits: 0
        }).format(value * (currencyData.rates[currency] || 1));
      } catch {
        return `${value} ${currency}`;
      }
    }

    function recalc() {
      const currency = currencySelect.value;
      let min = 0, max = 0;

      document.querySelectorAll(\`.level-items[data-level="\${activeLevel}"] .equipment-checkbox\`).forEach(cb => {
        const minVal = parseFloat(cb.dataset.min) || 0;
        const maxVal = parseFloat(cb.dataset.max) || minVal;
        if (cb.checked) {
          min += minVal;
          max += maxVal;
        }

        const label = cb.closest("label").querySelector(".item-price");
        if (label) {
          label.textContent = maxVal > minVal 
            ? \`\${format(minVal, currency)} - \${format(maxVal, currency)}\`
            : format(minVal, currency);
        }
      });

      totalBox.textContent = \`\${format(min, currency)} - \${format(max, currency)}\`;

      // stats update
      document.querySelectorAll(".stat-price").forEach(el => {
        const base = parseFloat(el.dataset.value);
        if (!isNaN(base)) {
          el.textContent = format(base, currency);
        }
      });
    }

    // Tab switching
    tabs.forEach(btn => {
      btn.addEventListener("click", () => {
        activeLevel = btn.dataset.level;
        tabs.forEach(t => t.classList.remove("tab-active"));
        btn.classList.add("tab-active");
        levelContainers.forEach(c => c.classList.toggle("hidden", c.dataset.level !== activeLevel));
        recalc();
      });
    });

    currencySelect.addEventListener("change", recalc);
    document.querySelectorAll(".equipment-checkbox").forEach(cb => cb.addEventListener("change", recalc));

    recalc();
  </script>
</Layout>
