---
import Layout from '../../layouts/Layout.astro';
import { hobbies } from '../../data/hobbies.json';
import currencyData from '../../data/currencies.json';
import uiLabels from '../../data/uiLabels.json';

// --- Page Generation Logic ---
export function getStaticPaths() {
  const languages = ['en', 'es', 'de', 'fr', 'pt', 'ja', 'ar', 'hi'];
  const paths = [];
  languages.forEach(lang => {
    paths.push({ params: { lang } });
  });
  return paths;
}

// --- Data Preparation ---
const { lang } = Astro.params;
const ui = uiLabels[lang] || uiLabels['en'];

// Helpers
const getText = (field, fallback = '') => {
  if (!field) return fallback;
  if (typeof field === 'string') return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return fallback;
};

const getArray = (field) => {
  if (!field) return [];
  if (Array.isArray(field)) return field;
  if (field[lang]) return field[lang];
  if (field['en']) return field['en'];
  return [];
};

// Helper to replace placeholders in UI text
const formatUIText = (text, hobby) => {
  return text.replace('{hobby}', getText(hobby?.name || ''));
};

// Get unique categories and cost ranges for filters
const categories = [...new Set(hobbies.map(h => h.category).filter(Boolean))];
const costRanges = [
  { id: 'free', min: 0, max: 0, label: { en: 'Free', es: 'Gratis', de: 'Kostenlos', fr: 'Gratuit', pt: 'Grátis', ja: '無料', ar: 'مجاني', hi: 'मुफ्त' } },
  { id: 'budget', min: 1, max: 100, label: { en: 'Budget ($1-$100)', es: 'Económico ($1-$100)', de: 'Budget ($1-$100)', fr: 'Économique ($1-$100)', pt: 'Barato ($1-$100)', ja: '予算内 ($1-$100)', ar: 'اقتصادي ($1-$100)', hi: 'बजट ($1-$100)' } },
  { id: 'moderate', min: 101, max: 500, label: { en: 'Moderate ($101-$500)', es: 'Moderado ($101-$500)', de: 'Moderat ($101-$500)', fr: 'Modéré ($101-$500)', pt: 'Moderado ($101-$500)', ja: '中程度 ($101-$500)', ar: 'متوسط ($101-$500)', hi: 'मध्यम ($101-$500)' } },
  { id: 'premium', min: 501, max: 1000, label: { en: 'Premium ($501-$1000)', es: 'Premium ($501-$1000)', de: 'Premium ($501-$1000)', fr: 'Premium ($501-$1000)', pt: 'Premium ($501-$1000)', ja: 'プレミアム ($501-$1000)', ar: 'متميز ($501-$1000)', hi: 'प्रीमियम ($501-$1000)' } },
  { id: 'expensive', min: 1001, max: 999999, label: { en: 'Expensive ($1000+)', es: 'Caro ($1000+)', de: 'Teuer ($1000+)', fr: 'Cher ($1000+)', pt: 'Caro ($1000+)', ja: '高価 ($1000+)', ar: 'باهظ ($1000+)', hi: 'महंगा ($1000+)' } }
];

// Enhanced UI labels for hobbies page
const hobbiesPageLabels = {
  en: {
    pageTitle: 'Discover Your Perfect Hobby',
    pageSubtitle: 'Explore cost calculators for popular hobbies and find your next passion project',
    searchPlaceholder: 'Search hobbies...',
    filterByCategory: 'Filter by Category',
    filterByCost: 'Filter by Startup Cost',
    moneyMakingHobbies: 'Money-Making Hobbies',
    allCategories: 'All Categories',
    allCosts: 'All Costs',
    clearFilters: 'Clear Filters',
    hobbiesFound: 'hobbies found',
    calculateCost: 'Calculate Cost',
    startingFrom: 'Starting from',
    canEarnMoney: 'Can earn money',
    noHobbiesFound: 'No hobbies found matching your criteria',
    tryDifferentFilters: 'Try adjusting your filters or search terms',
    popularHobbies: 'Popular Hobbies',
    trendingNow: 'Trending Now'
  },
  es: {
    pageTitle: 'Descubre tu Hobby Perfecto',
    pageSubtitle: 'Explora calculadoras de costos para hobbies populares y encuentra tu próximo proyecto de pasión',
    searchPlaceholder: 'Buscar hobbies...',
    filterByCategory: 'Filtrar por Categoría',
    filterByCost: 'Filtrar por Costo Inicial',
    moneyMakingHobbies: 'Hobbies que Generan Dinero',
    allCategories: 'Todas las Categorías',
    allCosts: 'Todos los Costos',
    clearFilters: 'Limpiar Filtros',
    hobbiesFound: 'hobbies encontrados',
    calculateCost: 'Calcular Costo',
    startingFrom: 'Desde',
    canEarnMoney: 'Puede generar dinero',
    noHobbiesFound: 'No se encontraron hobbies que coincidan con tus criterios',
    tryDifferentFilters: 'Prueba ajustando tus filtros o términos de búsqueda',
    popularHobbies: 'Hobbies Populares',
    trendingNow: 'Tendencia Ahora'
  },
  de: {
    pageTitle: 'Entdecke dein perfektes Hobby',
    pageSubtitle: 'Erkunde Kostenrechner für beliebte Hobbys und finde dein nächstes Leidenschaftsprojekt',
    searchPlaceholder: 'Hobbys suchen...',
    filterByCategory: 'Nach Kategorie filtern',
    filterByCost: 'Nach Startkosten filtern',
    moneyMakingHobbies: 'Geld verdienende Hobbys',
    allCategories: 'Alle Kategorien',
    allCosts: 'Alle Kosten',
    clearFilters: 'Filter löschen',
    hobbiesFound: 'Hobbys gefunden',
    calculateCost: 'Kosten berechnen',
    startingFrom: 'Ab',
    canEarnMoney: 'Kann Geld verdienen',
    noHobbiesFound: 'Keine Hobbys gefunden, die deinen Kriterien entsprechen',
    tryDifferentFilters: 'Versuche deine Filter oder Suchbegriffe anzupassen',
    popularHobbies: 'Beliebte Hobbys',
    trendingNow: 'Trending jetzt'
  },
  fr: {
    pageTitle: 'Découvrez votre Loisir Parfait',
    pageSubtitle: 'Explorez les calculateurs de coûts pour les loisirs populaires et trouvez votre prochain projet passion',
    searchPlaceholder: 'Rechercher des loisirs...',
    filterByCategory: 'Filtrer par Catégorie',
    filterByCost: 'Filtrer par Coût de Démarrage',
    moneyMakingHobbies: 'Loisirs qui Rapportent',
    allCategories: 'Toutes les Catégories',
    allCosts: 'Tous les Coûts',
    clearFilters: 'Effacer les Filtres',
    hobbiesFound: 'loisirs trouvés',
    calculateCost: 'Calculer le Coût',
    startingFrom: 'À partir de',
    canEarnMoney: 'Peut rapporter de l\'argent',
    noHobbiesFound: 'Aucun loisir trouvé correspondant à vos critères',
    tryDifferentFilters: 'Essayez d\'ajuster vos filtres ou termes de recherche',
    popularHobbies: 'Loisirs Populaires',
    trendingNow: 'Tendance Maintenant'
  },
  pt: {
    pageTitle: 'Descubra seu Hobby Perfeito',
    pageSubtitle: 'Explore calculadoras de custos para hobbies populares e encontre seu próximo projeto de paixão',
    searchPlaceholder: 'Pesquisar hobbies...',
    filterByCategory: 'Filtrar por Categoria',
    filterByCost: 'Filtrar por Custo Inicial',
    moneyMakingHobbies: 'Hobbies que Geram Dinheiro',
    allCategories: 'Todas as Categorias',
    allCosts: 'Todos os Custos',
    clearFilters: 'Limpar Filtros',
    hobbiesFound: 'hobbies encontrados',
    calculateCost: 'Calcular Custo',
    startingFrom: 'A partir de',
    canEarnMoney: 'Pode gerar dinheiro',
    noHobbiesFound: 'Nenhum hobby encontrado que corresponda aos seus critérios',
    tryDifferentFilters: 'Tente ajustar seus filtros ou termos de pesquisa',
    popularHobbies: 'Hobbies Populares',
    trendingNow: 'Tendência Agora'
  },
  ja: {
    pageTitle: '完璧な趣味を見つけよう',
    pageSubtitle: '人気の趣味のコスト計算機を探索し、次の情熱プロジェクトを見つけましょう',
    searchPlaceholder: '趣味を検索...',
    filterByCategory: 'カテゴリーで絞り込み',
    filterByCost: '初期費用で絞り込み',
    moneyMakingHobbies: 'お金を稼げる趣味',
    allCategories: 'すべてのカテゴリー',
    allCosts: 'すべての費用',
    clearFilters: 'フィルターをクリア',
    hobbiesFound: '趣味が見つかりました',
    calculateCost: 'コストを計算',
    startingFrom: '開始価格',
    canEarnMoney: 'お金を稼げます',
    noHobbiesFound: '条件に一致する趣味が見つかりませんでした',
    tryDifferentFilters: 'フィルターや検索語句を調整してみてください',
    popularHobbies: '人気の趣味',
    trendingNow: 'トレンド中'
  },
  ar: {
    pageTitle: 'اكتشف هوايتك المثالية',
    pageSubtitle: 'استكشف حاسبات التكلفة للهوايات الشائعة واعثر على مشروع شغفك التالي',
    searchPlaceholder: 'البحث عن الهوايات...',
    filterByCategory: 'تصفية حسب الفئة',
    filterByCost: 'تصفية حسب تكلفة البداية',
    moneyMakingHobbies: 'هوايات مربحة',
    allCategories: 'جميع الفئات',
    allCosts: 'جميع التكاليف',
    clearFilters: 'مسح المرشحات',
    hobbiesFound: 'هواية موجودة',
    calculateCost: 'حساب التكلفة',
    startingFrom: 'ابتداءً من',
    canEarnMoney: 'يمكن أن تحقق دخلاً',
    noHobbiesFound: 'لم يتم العثور على هوايات تطابق معاييرك',
    tryDifferentFilters: 'جرب تعديل المرشحات أو مصطلحات البحث',
    popularHobbies: 'الهوايات الشائعة',
    trendingNow: 'الأكثر رواجاً الآن'
  },
  hi: {
    pageTitle: 'अपना सही शौक खोजें',
    pageSubtitle: 'लोकप्रिय शौक के लिए लागत कैलकुलेटर देखें और अपना अगला जुनून प्रोजेक्ट खोजें',
    searchPlaceholder: 'शौक खोजें...',
    filterByCategory: 'श्रेणी के अनुसार फ़िल्टर करें',
    filterByCost: 'शुरुआती लागत के अनुसार फ़िल्टर करें',
    moneyMakingHobbies: 'पैसा कमाने वाले शौक',
    allCategories: 'सभी श्रेणियां',
    allCosts: 'सभी लागतें',
    clearFilters: 'फ़िल्टर साफ़ करें',
    hobbiesFound: 'शौक मिले',
    calculateCost: 'लागत की गणना करें',
    startingFrom: 'शुरुआत से',
    canEarnMoney: 'पैसा कमा सकता है',
    noHobbiesFound: 'आपके मापदंडों से मेल खाने वाला कोई शौक नहीं मिला',
    tryDifferentFilters: 'अपने फ़िल्टर या खोज शब्दों को समायोजित करने का प्रयास करें',
    popularHobbies: 'लोकप्रिय शौक',
    trendingNow: 'अब ट्रेंडिंग'
  }
};

const pageLabels = hobbiesPageLabels[lang] || hobbiesPageLabels['en'];
---

<Layout title={`${pageLabels.pageTitle} | HobbyCalc`} lang={lang}>
  <div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
    <!-- Hero Section -->
    <div class="relative overflow-hidden">
      <div class="absolute inset-0 bg-gradient-to-r from-indigo-600/10 to-purple-600/10"></div>
      <div class="relative max-w-7xl mx-auto px-4 py-8">
        <!-- Breadcrumb -->
        <nav class="flex items-center space-x-2 text-sm text-gray-600 mb-6" aria-label="Breadcrumb">
          <a href={`/${lang}/`} class="hover:text-indigo-600 transition-colors">{ui.home}</a>
          <span class="text-gray-400">/</span>
          <span class="text-gray-900 font-medium">{ui.hobbies}</span>
        </nav>

        <!-- Header -->
        <div class="text-center mb-8">
          <h1 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
            <span class="bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
              {pageLabels.pageTitle}
            </span>
          </h1>
          <p class="text-lg text-gray-600 max-w-2xl mx-auto">
            {pageLabels.pageSubtitle}
          </p>
        </div>

        <!-- Search Bar -->
        <div class="max-w-2xl mx-auto mb-8">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <input 
              type="text" 
              id="search-input"
              class="block w-full pl-10 pr-3 py-4 border border-gray-300 rounded-2xl leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-2 focus:ring-indigo-500 focus:border-transparent shadow-lg text-lg"
              placeholder={pageLabels.searchPlaceholder}
            >
          </div>
        </div>
      </div>
    </div>

    <!-- Filters and Content -->
    <div class="max-w-7xl mx-auto px-4 pb-12">
      <!-- Filter Section -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <!-- Category Filter -->
          <div>
            <label class="block text-sm font-semibold text-gray-700 mb-3">{pageLabels.filterByCategory}</label>
            <select id="category-filter" class="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
              <option value="">{pageLabels.allCategories}</option>
              {categories.map(category => (
                <option value={category}>{category}</option>
              ))}
            </select>
          </div>

          <!-- Cost Filter -->
          <div>
            <label class="block text-sm font-semibold text-gray-700 mb-3">{pageLabels.filterByCost}</label>
            <select id="cost-filter" class="w-full p-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
              <option value="">{pageLabels.allCosts}</option>
              {costRanges.map(range => (
                <option value={range.id}>{getText(range.label)}</option>
              ))}
            </select>
          </div>

          <!-- Money-Making Filter -->
          <div>
            <label class="block text-sm font-semibold text-gray-700 mb-3">{pageLabels.moneyMakingHobbies}</label>
            <label class="flex items-center">
              <input type="checkbox" id="money-making-filter" class="w-5 h-5 text-indigo-600 bg-gray-100 border-gray-300 rounded focus:ring-indigo-500 focus:ring-2">
              <span class="ml-3 text-gray-700">{pageLabels.canEarnMoney}</span>
            </label>
          </div>

          <!-- Clear Filters -->
          <div class="flex items-end">
            <button id="clear-filters" class="w-full px-4 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors font-semibold">
              {pageLabels.clearFilters}
            </button>
          </div>
        </div>

        <!-- Results Counter -->
        <div class="mt-4 pt-4 border-t border-gray-100">
          <p class="text-gray-600">
            <span id="results-count" class="font-semibold text-indigo-600">0</span>
            <span class="ml-1">{pageLabels.hobbiesFound}</span>
          </p>
        </div>
      </div>

      <!-- Hobbies Grid -->
      <div id="hobbies-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        <!-- Hobbies will be populated by JavaScript -->
      </div>

      <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-12">
        <div class="max-w-md mx-auto">
          <div class="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="w-12 h-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6-4h6m2 5.291A7.962 7.962 0 0112 15c-2.137 0-4.146-.832-5.636-2.364M8.364 8.636a4 4 0 015.272 0" />
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2">{pageLabels.noHobbiesFound}</h3>
          <p class="text-gray-600">{pageLabels.tryDifferentFilters}</p>
        </div>
      </div>

      <!-- AdSense Ad Space -->
      <div class="bg-gray-100 rounded-2xl p-8 text-center mb-8 border-2 border-dashed border-gray-300">
        <p class="text-gray-500 text-sm">{ui.advertisementSpace}</p>
        <p class="text-gray-400 text-xs mt-1">{ui.adUnit728}</p>
      </div>

      <!-- Popular Categories Section -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
        <div class="p-6 bg-gradient-to-r from-indigo-50 to-purple-50 border-b">
          <h2 class="text-2xl font-bold text-gray-900">{pageLabels.popularHobbies}</h2>
          <p class="text-gray-600 mt-2">{pageLabels.trendingNow}</p>
        </div>
        <div class="p-6">
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            {categories.slice(0, 8).map(category => (
              <button class="category-pill p-4 bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl hover:from-indigo-50 hover:to-purple-50 transition-all duration-300 text-left group border border-gray-200 hover:border-indigo-200">
                <div class="text-2xl mb-2">🎨</div>
                <div class="font-semibold text-gray-900 group-hover:text-indigo-600 transition-colors">{category}</div>
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <footer class="bg-gray-900 text-gray-300 py-12">
      <div class="max-w-7xl mx-auto px-4">
        <div class="grid grid-cols-2 md:grid-cols-5 gap-8">
          <div class="col-span-2">
            <h3 class="text-xl font-bold text-white mb-4">🎨 HobbyCalc</h3>
            <p class="text-gray-400 mb-4">{ui.calculateTrueCost}</p>
          </div>
          <div>
            <h4 class="font-semibold text-white mb-3">{ui.quickLinks}</h4>
            <div class="space-y-2 text-sm">
              <a href={`/${lang}/`} class="block hover:text-white transition-colors">{ui.home}</a>
              <a href={`/${lang}/hobbies`} class="block hover:text-white transition-colors">{ui.allHobbies}</a>
            </div>
          </div>
          <div>
            <h4 class="font-semibold text-white mb-3">{ui.legal}</h4>
            <div class="space-y-2 text-sm">
              <a href={`/${lang}/privacy`} class="block hover:text-white transition-colors">{ui.privacyPolicy}</a>
              <a href={`/${lang}/terms`} class="block hover:text-white transition-colors">{ui.termsOfService}</a>
              <a href={`/${lang}/disclaimer`} class="block hover:text-white transition-colors">{ui.disclaimer}</a>
            </div>
          </div>
          <div>
            <h4 class="font-semibold text-white mb-3">{ui.contact}</h4>
            <div class="space-y-2 text-sm">
              <a href={`/${lang}/contact`} class="block hover:text-white transition-colors">{ui.getInTouch}</a>
              <a href={`/${lang}/about`} class="block hover:text-white transition-colors">{ui.aboutUs}</a>
            </div>
          </div>
        </div>
        <div class="border-t border-gray-800 mt-8 pt-8 text-center text-sm text-gray-400">
          © 2025 HobbyCalc. {ui.allRightsReserved}.
        </div>
      </div>
    </footer>
  </div>

  <!-- JavaScript -->
  <script define:vars={{ hobbies, currencyData, costRanges, pageLabels, lang, ui }}>
    class HobbiesPage {
      constructor() {
        this.hobbies = hobbies;
        this.filteredHobbies = [...hobbies];
        this.pageLabels = pageLabels;
        this.lang = lang;
        this.ui = ui;
        this.costRanges = costRanges;
        
        this.init();
      }

      init() {
        this.bindElements();
        this.attachEventListeners();
        this.renderHobbies();
        this.updateResultsCount();
      }

      bindElements() {
        this.searchInput = document.getElementById('search-input');
        this.categoryFilter = document.getElementById('category-filter');
        this.costFilter = document.getElementById('cost-filter');
        this.moneyMakingFilter = document.getElementById('money-making-filter');
        this.clearFiltersBtn = document.getElementById('clear-filters');
        this.hobbiesGrid = document.getElementById('hobbies-grid');
        this.noResults = document.getElementById('no-results');
        this.resultsCount = document.getElementById('results-count');
      }

      attachEventListeners() {
        this.searchInput.addEventListener('input', () => this.applyFilters());
        this.categoryFilter.addEventListener('change', () => this.applyFilters());
        this.costFilter.addEventListener('change', () => this.applyFilters());
        this.moneyMakingFilter.addEventListener('change', () => this.applyFilters());
        this.clearFiltersBtn.addEventListener('click', () => this.clearAllFilters());
        
        // Category pill clicks
        document.querySelectorAll('.category-pill').forEach((pill, index) => {
          pill.addEventListener('click', () => {
            const categories = [...new Set(this.hobbies.map(h => h.category).filter(Boolean))];
            this.categoryFilter.value = categories[index];
            this.applyFilters();
          });
        });
      }

      getText(field, fallback = '') {
        if (!field) return fallback;
        if (typeof field === 'string') return field;
        if (field[this.lang]) return field[this.lang];
        if (field['en']) return field['en'];
        return fallback;
      }

      getMinCost(hobby) {
        if (!hobby.breakdown) return 0;
        const beginnerItems = hobby.breakdown.beginner?.keyItems || [];
        if (beginnerItems.length === 0) return 0;
        return Math.min(...beginnerItems.map(item => item.cost[0]));
      }

      getTotalMinCost(hobby) {
        if (!hobby.breakdown) return 0;
        const beginnerItems = hobby.breakdown.beginner?.keyItems || [];
        return beginnerItems.reduce((total, item) => total + item.cost[0], 0);
      }

      formatPrice(amount) {
        const formatter = new Intl.NumberFormat('en-US', {
          style: 'currency',
          currency: 'USD',
          maximumFractionDigits: 0
        });
        return formatter.format(amount);
      }

      applyFilters() {
        const searchTerm = this.searchInput.value.toLowerCase();
        const selectedCategory = this.categoryFilter.value;
        const selectedCost = this.costFilter.value;
        const moneyMakingOnly = this.moneyMakingFilter.checked;

        this.filteredHobbies = this.hobbies.filter(hobby => {
          // Search filter
          if (searchTerm && !this.getText(hobby.name).toLowerCase().includes(searchTerm)) {
            return false;
          }

          // Category filter
          if (selectedCategory && hobby.category !== selectedCategory) {
            return false;
          }

          // Cost filter
          if (selectedCost) {
            const costRange = this.costRanges.find(r => r.id === selectedCost);
            if (costRange) {
              const totalMinCost = this.getTotalMinCost(hobby);
              if (totalMinCost < costRange.min || totalMinCost > costRange.max) {
                return false;
              }
            }
          }

          // Money-making filter
          if (moneyMakingOnly && !hobby.canEarnMoney) {
            return false;
          }

          return true;
        });

        this.renderHobbies();
        this.updateResultsCount();
      }

      clearAllFilters() {
        this.searchInput.value = '';
        this.categoryFilter.value = '';
        this.costFilter.value = '';
        this.moneyMakingFilter.checked = false;
        this.applyFilters();
      }

      updateResultsCount() {
        this.resultsCount.textContent = this.filteredHobbies.length;
        
        if (this.filteredHobbies.length === 0) {
          this.hobbiesGrid.classList.add('hidden');
          this.noResults.classList.remove('hidden');
        } else {
          this.hobbiesGrid.classList.remove('hidden');
          this.noResults.classList.add('hidden');
        }
      }

      renderHobbies() {
        this.hobbiesGrid.innerHTML = '';
        
        this.filteredHobbies.forEach((hobby, index) => {
          const totalMinCost = this.getTotalMinCost(hobby);
          const hobbyCard = document.createElement('div');
          hobbyCard.className = 'hobby-card bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1';
          
          hobbyCard.innerHTML = `
            <div class="relative">
              <div class="h-48 bg-gradient-to-br from-indigo-100 to-purple-100 flex items-center justify-center">
                <div class="text-6xl">${hobby.icon || '🎨'}</div>
              </div>
              ${hobby.canEarnMoney ? `
                <div class="absolute top-3 right-3">
                  <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                    💰 ${this.pageLabels.canEarnMoney}
                  </span>
                </div>
              ` : ''}
            </div>
            
            <div class="p-6">
              <div class="mb-4">
                <h3 class="text-xl font-bold text-gray-900 mb-2">${this.getText(hobby.name)}</h3>
                <p class="text-gray-600 text-sm leading-relaxed">${this.getText(hobby.description) || this.getText(hobby.desc) || ''}</p>
              </div>
              
              <div class="flex items-center justify-between mb-4">
                <div>
                  <p class="text-sm text-gray-500">${this.pageLabels.startingFrom}</p>
                  <p class="text-2xl font-bold text-indigo-600">${this.formatPrice(totalMinCost)}</p>
                </div>
                ${hobby.category ? `
                  <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                    ${hobby.category}
                  </span>
                ` : ''}
              </div>
              
              <a href="/${this.lang}/hobbies/${hobby.id}" 
                 class="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white text-center py-3 px-4 rounded-xl font-semibold hover:from-indigo-700 hover:to-purple-700 transition-all duration-200 shadow-lg hover:shadow-xl block">
                ${this.pageLabels.calculateCost}
              </a>
            </div>
          `;
          
          this.hobbiesGrid.appendChild(hobbyCard);
          
          // Add entrance animation
          setTimeout(() => {
            hobbyCard.style.opacity = '0';
            hobbyCard.style.transform = 'translateY(20px)';
            hobbyCard.style.transition = 'all 0.3s ease';
            setTimeout(() => {
              hobbyCard.style.opacity = '1';
              hobbyCard.style.transform = 'translateY(0)';
            }, index * 50);
          }, 10);
        });
      }
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new HobbiesPage();
    });
  </script>

  <!-- Custom Styles -->
  <style>
    .hobby-card {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .hobby-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    }

    .category-pill {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .category-pill:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    }

    /* Smooth scrolling */
    html {
      scroll-behavior: smooth;
    }

    /* Custom scrollbar for better UX */
    ::-webkit-scrollbar {
      width: 8px;
    }

    ::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 10px;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: #a8a8a8;
    }

    /* Loading states */
    .loading {
      opacity: 0.6;
      pointer-events: none;
    }

    /* Responsive grid adjustments */
    @media (max-width: 768px) {
      .hobby-card {
        margin-bottom: 1rem;
      }
    }

    /* Focus styles for accessibility */
    .hobby-card:focus-within {
      ring: 2px;
      ring-color: rgba(99, 102, 241, 0.5);
      ring-offset: 2px;
    }

    /* Animation keyframes */
    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-fadeInUp {
      animation: fadeInUp 0.5s ease-out forwards;
    }

    /* Search input focus effects */
    #search-input:focus {
      box-shadow: 0 10px 25px -5px rgba(99, 102, 241, 0.1);
    }

    /* Filter section styling */
    select:focus {
      box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
    }

    /* Checkbox styling */
    input[type="checkbox"]:checked {
      background-color: rgb(99, 102, 241);
      border-color: rgb(99, 102, 241);
    }

    /* Button hover effects */
    button:hover {
      transform: translateY(-1px);
    }

    /* Card content spacing */
    .hobby-card p {
      line-height: 1.6;
    }

    /* Badge styling */
    .badge {
      backdrop-filter: blur(10px);
      background-color: rgba(255, 255, 255, 0.8);
    }

    /* Grid responsive behavior */
    .grid-responsive {
      display: grid;
      gap: 1.5rem;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }

    /* No results styling */
    #no-results {
      min-height: 400px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Results counter styling */
    #results-count {
      font-weight: 700;
      color: rgb(99, 102, 241);
    }
  </style>
</Layout>
