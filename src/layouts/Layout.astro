---
interface Props {
  title: string;
  lang: string;
  description?: string;
  keywords?: string;
}

const { 
  title, 
  lang = 'en',
  description,
  keywords
} = Astro.props;

// Multilingual meta content
const metaContent = {
  en: {
    description: description || 'Calculate the true cost of your hobbies with our interactive cost calculator tools.',
    keywords: keywords || 'hobby calculator, cost calculator, hobby expenses, budget planning, hobby costs',
    siteName: 'HobbyCalc - Hobby Cost Calculator'
  },
  es: {
    description: description || 'Calcula el costo real de tus pasatiempos con nuestras herramientas de calculadora de costos interactivas.',
    keywords: keywords || 'calculadora de pasatiempos, calculadora de costos, gastos de pasatiempos, planificación de presupuesto',
    siteName: 'HobbyCalc - Calculadora de Costos de Pasatiempos'
  },
  de: {
    description: description || 'Berechnen Sie die wahren Kosten Ihrer Hobbys mit unseren interaktiven Kostenrechner-Tools.',
    keywords: keywords || 'Hobby-Rechner, Kostenrechner, Hobby-Ausgaben, Budgetplanung',
    siteName: 'HobbyCalc - Hobby-Kostenrechner'
  },
  fr: {
    description: description || 'Calculez le coût réel de vos loisirs avec nos outils de calculatrice de coûts interactifs.',
    keywords: keywords || 'calculatrice de loisirs, calculatrice de coûts, dépenses de loisirs, planification budgétaire',
    siteName: 'HobbyCalc - Calculatrice de Coûts de Loisirs'
  },
  pt: {
    description: description || 'Calcule o custo real dos seus hobbies com nossas ferramentas interativas de calculadora de custos.',
    keywords: keywords || 'calculadora de hobbies, calculadora de custos, despesas de hobbies, planejamento orçamentário',
    siteName: 'HobbyCalc - Calculadora de Custos de Hobbies'
  },
  ja: {
    description: description || 'インタラクティブなコスト計算ツールで趣味の真のコストを計算しましょう。',
    keywords: keywords || '趣味計算機, コスト計算機, 趣味の費用, 予算計画',
    siteName: 'HobbyCalc - 趣味コスト計算機'
  },
  ar: {
    description: description || 'احسب التكلفة الحقيقية لهواياتك باستخدام أدوات حاسبة التكلفة التفاعلية الخاصة بنا.',
    keywords: keywords || 'حاسبة الهوايات, حاسبة التكلفة, مصاريف الهوايات, تخطيط الميزانية',
    siteName: 'HobbyCalc - حاسبة تكلفة الهوايات'
  },
  hi: {
    description: description || 'हमारे इंटरैक्टिव लागत कैलकुलेटर टूल्स के साथ अपने शौक की वास्तविक लागत की गणना करें।',
    keywords: keywords || 'शौक कैलकुलेटर, लागत कैलकुलेटर, शौक खर्च, बजट योजना',
    siteName: 'HobbyCalc - शौक लागत कैलकुलेटर'
  }
};

const currentMeta = metaContent[lang] || metaContent.en;

const languages = { 
  en: 'English', 
  es: 'Español', 
  de: 'Deutsch', 
  fr: 'Français', 
  pt: 'Português', 
  ja: '日本語', 
  ar: 'العربية', 
  hi: 'हिन्दी' 
};

// Create correct URL for other languages
const currentPath = Astro.url.pathname;
const pathWithoutLang = currentPath.startsWith(`/${lang}`) ? currentPath.substring(3) : currentPath;
---

<!doctype html>
<html lang={lang} dir={lang === 'ar' ? 'rtl' : 'ltr'}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="robots" content="index, follow" />
    
    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={currentMeta.description} />
    <meta name="keywords" content={currentMeta.keywords} />
    <meta name="language" content={lang} />
    
    <!-- Open Graph -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={currentMeta.description} />
    <meta property="og:site_name" content={currentMeta.siteName} />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={Astro.url} />
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Custom CSS -->
    <style>
      body {
        font-family: system-ui, -apple-system, sans-serif;
      }
      .gradient-bg {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      }
      .card-hover {
        transition: all 0.3s ease;
      }
      .card-hover:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      }
      .fade-in {
        animation: fadeIn 0.5s ease-in;
      }
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }
    </style>
  </head>
  
  <body class="bg-gray-50 min-h-screen">
    <!-- Navigation -->
    <nav class="bg-white shadow-sm sticky top-0 z-40">
      <div class="max-w-7xl mx-auto px-4">
        <div class="flex justify-between items-center h-16">
          <!-- Logo -->
          <a href={`/${lang}/`} class="flex items-center space-x-2 text-xl font-bold text-indigo-600 hover:text-indigo-700">
            <span class="text-2xl">🎨</span>
            <span>HobbyCalc</span>
          </a>

          <!-- Desktop Navigation -->
          <div class="hidden md:flex items-center space-x-6">
            <a href={`/${lang}/`} class="text-gray-700 hover:text-indigo-600 font-medium">Home</a>
            <a href={`/${lang}/hobbies`} class="text-gray-700 hover:text-indigo-600 font-medium">All Hobbies</a>
            
            <!-- Language Selector -->
            <select 
              id="lang-selector" 
              class="bg-white border border-gray-300 rounded-lg px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"
              onchange="window.location.href = this.value"
            >
              {Object.entries(languages).map(([code, name]) => (
                <option value={`/${code}${pathWithoutLang}`} selected={code === lang}>
                  {name}
                </option>
              ))}
            </select>
          </div>

          <!-- Mobile Menu Button -->
          <button id="mobile-menu-btn" class="md:hidden p-2 rounded-lg hover:bg-gray-100">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>

        <!-- Mobile Menu -->
        <div id="mobile-menu" class="hidden md:hidden border-t py-4">
          <div class="space-y-2">
            <a href={`/${lang}/`} class="block px-4 py-2 text-gray-700 hover:text-indigo-600 hover:bg-gray-50 rounded">Home</a>
            <a href={`/${lang}/hobbies`} class="block px-4 py-2 text-gray-700 hover:text-indigo-600 hover:bg-gray-50 rounded">All Hobbies</a>
            <div class="px-4 py-2">
              <select 
                class="w-full bg-white border border-gray-300 rounded px-2 py-1 text-sm"
                onchange="window.location.href = this.value"
              >
                {Object.entries(languages).map(([code, name]) => (
                  <option value={`/${code}${pathWithoutLang}`} selected={code === lang}>
                    {name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="fade-in">
      <slot />
    </main>

    <!-- Back to Top -->
    <button 
      id="back-to-top" 
      class="fixed bottom-6 right-6 bg-indigo-600 text-white p-3 rounded-full shadow-lg hover:bg-indigo-700 opacity-0 invisible transition-all duration-300 z-30"
    >
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>

    <!-- JavaScript -->
    <script>
      // Mobile menu toggle
      document.getElementById('mobile-menu-btn')?.addEventListener('click', () => {
        const menu = document.getElementById('mobile-menu');
        menu?.classList.toggle('hidden');
      });

      // Back to top button
      const backToTop = document.getElementById('back-to-top');
      window.addEventListener('scroll', () => {
        if (window.pageYOffset > 300) {
          backToTop?.classList.remove('opacity-0', 'invisible');
        } else {
          backToTop?.classList.add('opacity-0', 'invisible');
        }
      });

      backToTop?.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        const menu = document.getElementById('mobile-menu');
        const btn = document.getElementById('mobile-menu-btn');
        if (!menu?.contains(e.target) && !btn?.contains(e.target)) {
          menu?.classList.add('hidden');
        }
      });
    </script>
  </body>
</html>
